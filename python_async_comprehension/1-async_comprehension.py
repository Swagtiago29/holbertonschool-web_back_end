#!/usr/bin/env python3
#!/usr/bin/env python3
"""
Module: async_comprehension_module

This module provides functionality to asynchronously generate random integers
using an asynchronous generator and collect them using an asynchronous
comprehension. It utilizes the async_generator function from an external
module (0-async_generator) and collects the generated values in a list.

Functions:
    - async_comprehension: Collects values asynchronously from the
    async_generator and returns them in a list.

External Dependencies:
    - async_generator: An asynchronous generator function that generate random
    integers with a delay.
"""
import importlib
from typing import List
async_generator = importlib.import_module('0-async_generator').async_generator


async def async_comprehension() -> List[int]:
    """
    Asynchronously collects random integers from an asynchronous generator.

    This function uses the async for loop to iterate over values yielded by
    the async_generator function, appending each value to a list and returning
    the list of 10 integers.

    The async_generator function generates random integers between 0 and 10
    with a delay of 1 second between each number, simulating an asynchronous
    processing scenario.

    Returns:
        list[int]: A list of 10 random integers generated by the
        async_generator function.

    Example:
        result = await async_comprehension()
        print(result)
        # Output: [random integers between 0 and 10]
    """
    return [i async for i in async_generator()]
